<?xml version="1.0" encoding="utf-8" standalone="no"?>
<test-results xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="nunit_schema_2.5.xsd" name="Pester" total="17" errors="0" failures="0" not-run="0" inconclusive="0" ignored="0" skipped="0" invalid="0" date="2018-11-21" time="18:02:08">
  <environment user="Claudio" machine-name="CLMA1040" cwd="D:\_Studium\zSemester5\SA\GitRepo\SourceCode\SRI\Main" user-domain="CLMA1040" platform="Microsoft Windows 10 Pro|C:\Windows|\Device\Harddisk0\Partition4" nunit-version="2.5.8.0" os-version="10.0.17134" clr-version="4.0.30319.42000" />
  <culture-info current-culture="en-US" current-uiculture="en-US" />
  <test-suite type="TestFixture" name="Pester" executed="True" result="Success" success="True" time="43.6874" asserts="0" description="Pester">
    <results>
      <test-suite type="TestFixture" name="D:\_Studium\zSemester5\SA\GitRepo\SourceCode\SRI\GetAndAnalyseAuditPolicies\GetAndAnalyseAuditPolicies.Tests.ps1" executed="True" result="Success" success="True" time="0.7606" asserts="0" description="D:\_Studium\zSemester5\SA\GitRepo\SourceCode\SRI\GetAndAnalyseAuditPolicies\GetAndAnalyseAuditPolicies.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="IsCAPI2Enabled" executed="True" result="Success" success="True" time="0.3235" asserts="0" description="IsCAPI2Enabled">
            <results>
              <test-suite type="TestFixture" name="xml with disabled CAPI2" executed="True" result="Success" success="True" time="0.1476" asserts="0" description="xml with disabled CAPI2">
                <results>
                  <test-case description="checks if function returns Disable" name="IsCAPI2Enabled.xml with disabled CAPI2.checks if function returns Disable" time="0.1476" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="xml with enabled CAPI2 but bad log size of 1048576" executed="True" result="Success" success="True" time="0.0834" asserts="0" description="xml with enabled CAPI2 but bad log size of 1048576">
                <results>
                  <test-case description="checks if function returns EnabledBadLogSize" name="IsCAPI2Enabled.xml with enabled CAPI2 but bad log size of 1048576.checks if function returns EnabledBadLogSize" time="0.0695" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="checks if function returns LogSize of 1048576" name="IsCAPI2Enabled.xml with enabled CAPI2 but bad log size of 1048576.checks if function returns LogSize of 1048576" time="0.0139" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="xml with enabled CAPI2 but good log size of 4980736" executed="True" result="Success" success="True" time="0.0925" asserts="0" description="xml with enabled CAPI2 but good log size of 4980736">
                <results>
                  <test-case description="checks if function returns EnabledGoodLogSize" name="IsCAPI2Enabled.xml with enabled CAPI2 but good log size of 4980736.checks if function returns EnabledGoodLogSize" time="0.0812" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="checks if function returns LogSize of 4980736" name="IsCAPI2Enabled.xml with enabled CAPI2 but good log size of 4980736.checks if function returns LogSize of 4980736" time="0.0113" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="IsForceAuditPoliySubcategoryEnabeled" executed="True" result="Success" success="True" time="0.2004" asserts="0" description="IsForceAuditPoliySubcategoryEnabeled">
            <results>
              <test-suite type="TestFixture" name="registry value SCENoApplyLegacyAuditPolicy = 1" executed="True" result="Success" success="True" time="0.0986" asserts="0" description="registry value SCENoApplyLegacyAuditPolicy = 1">
                <results>
                  <test-case description="checks if function returns ForceAuditPolicySubcategory Enabled" name="IsForceAuditPoliySubcategoryEnabeled.registry value SCENoApplyLegacyAuditPolicy = 1.checks if function returns ForceAuditPolicySubcategory Enabled" time="0.0986" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="registry value SCENoApplyLegacyAuditPolicy = 0" executed="True" result="Success" success="True" time="0.1018" asserts="0" description="registry value SCENoApplyLegacyAuditPolicy = 0">
                <results>
                  <test-case description="checks if function returns ForceAuditPolicySubcategory Enabled" name="IsForceAuditPoliySubcategoryEnabeled.registry value SCENoApplyLegacyAuditPolicy = 0.checks if function returns ForceAuditPolicySubcategory Enabled" time="0.1018" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="IsSysmonInstalled" executed="True" result="Success" success="True" time="0.2366" asserts="0" description="IsSysmonInstalled">
            <results>
              <test-suite type="TestFixture" name="Sysmon64" executed="True" result="Success" success="True" time="0.2366" asserts="0" description="Sysmon64">
                <results>
                  <test-case description="checks if Sysmon64 is installed and running" name="IsSysmonInstalled.Sysmon64.checks if Sysmon64 is installed and running" time="0.1989" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="checks if Sysmon64 is installed but not running" name="IsSysmonInstalled.Sysmon64.checks if Sysmon64 is installed but not running" time="0.0219" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="checks if Sysmon64 is not installed" name="IsSysmonInstalled.Sysmon64.checks if Sysmon64 is not installed" time="0.0158" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Sysmon" executed="True" result="Success" success="True" time="0" asserts="0" description="Sysmon">
                <results />
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="D:\_Studium\zSemester5\SA\GitRepo\SourceCode\SRI\GetAndCompareLogs\GetAndCompareLogs.Tests.ps1" executed="True" result="Success" success="True" time="42.9268" asserts="0" description="D:\_Studium\zSemester5\SA\GitRepo\SourceCode\SRI\GetAndCompareLogs\GetAndCompareLogs.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="read Get-EventLogs" executed="True" result="Success" success="True" time="17.4415" asserts="0" description="read Get-EventLogs">
            <results>
              <test-case description="checks if got windowslogs from system" name="read Get-EventLogs.checks if got windowslogs from system" time="4.3248" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="checks if got windowslogs from security" name="read Get-EventLogs.checks if got windowslogs from security" time="13.1167" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="read App and Service Logs" executed="True" result="Success" success="True" time="2.5292" asserts="0" description="read App and Service Logs">
            <results>
              <test-case description="checks if got eventlogs from security" name="read App and Service Logs.checks if got eventlogs from security" time="1.26" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="checks if got eventlogs from security" name="read App and Service Logs.checks if got eventlogs from security" time="1.2692" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="check function GetEventLogsAndExport" executed="True" result="Success" success="True" time="21.8367" asserts="0" description="check function GetEventLogsAndExport">
            <results>
              <test-case description="checks function GetEventLogsAndExport" name="check function GetEventLogsAndExport.checks function GetEventLogsAndExport" time="21.8367" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="check function GetApplicationAndServiceLogs" executed="True" result="Success" success="True" time="0.6136" asserts="0" description="check function GetApplicationAndServiceLogs">
            <results>
              <test-case description="checks function GetEventLogsAndExport" name="check function GetApplicationAndServiceLogs.checks function GetEventLogsAndExport" time="0.6136" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test function ImportCompareExport" executed="True" result="Success" success="True" time="0.5057" asserts="0" description="Test function ImportCompareExport">
            <results>
              <test-case description="calls the function and loads a test-xml" name="Test function ImportCompareExport.calls the function and loads a test-xml" time="0.5057" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>